generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id              Int     @id @default(autoincrement())
  first_name      String
  last_name       String
  email           String  @unique
  phone           String
  role            role    @default(user)
  password        String
  email_confirmed Boolean @default(false)

  passage         passage[]
  purchase_info   purchase_info[]
  progress_report progress_report[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, email])
  @@unique([id, first_name])
}

model packages {
  id         Int          @id @default(autoincrement())
  name       String
  title      String
  currency   currencyType
  price      Float
  discount   Float        @default(00.00)
  status     Boolean      @default(true)
  expiration Int

  purchase_info purchase_info[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id])
}

model promo_code {
  id                     Int          @id @default(autoincrement())
  code                   String
  discount_type          discountType
  discount_amount        Int
  use_count              Int          @default(0)
  affiliate_amount       Int          @default(0)
  total_affiliate_amount Float        @default(0)
  is_active              Boolean      @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model coupon_code {
  id              Int          @id @default(autoincrement())
  code            String
  discount_type   discountType
  discount_amount Int
  use_count       Int          @default(0)
  is_active       Boolean      @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model purchase_info {
  id         Int @id @default(autoincrement())
  package_id Int
  user_id    Int

  expiry_date DateTime

  currency        currencyType
  discount_amount Float        @default(00.00)
  amount          Float
  service_charge  String
  card_number     String
  cus_phone       String
  pg_taxnid       String
  mer_txnid       String
  store_amount    String
  bank_txn        String
  card_type       String

  packages packages @relation(fields: [package_id], references: [id])
  user     user     @relation(fields: [user_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model passage {
  id         Int    @id @default(autoincrement())
  lession_no Int
  title      String
  passage    String
  passage_len Int
  summary    String
  level      level
  creator_id Int
  created_by String

  quiz quiz[]

  progress_report progress_report?

  user user @relation(fields: [creator_id, created_by], references: [id, first_name])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([lession_no])
}

model quiz {
  id       Int      @id @default(autoincrement())
  type     quizType
  question String
  opt_a    String
  opt_b    String
  opt_c    String
  opt_d    String

  lession_no  Int
  quiz_answer quiz_answer?
  passage     passage      @relation(fields: [lession_no], references: [lession_no], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model quiz_answer {
  id Int @id @default(autoincrement())

  quiz_id Int @unique

  ans_a Boolean @default(false)
  ans_b Boolean @default(false)
  ans_c Boolean @default(false)
  ans_d Boolean @default(false)

  quiz quiz @relation(fields: [quiz_id], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model progress_report {
  id Int @id @default(autoincrement())

  user_id Int

  wpm           Int
  lexical       Int
  comprehension Int

  lession_no Int

  user      user     @relation(fields: [user_id], references: [id])
  passage   passage  @relation(fields: [lession_no], references: [lession_no])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([lession_no])
}

enum role {
  user
  moderator
  admin
}

enum currencyType {
  BDT
  USD
}

enum discountType {
  flat
  percentage
}

enum quizType {
  lexical
  comprehensive
}

enum level {
  beginner
  intermediate
  advanced
}
